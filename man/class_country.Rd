% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class_country.R
\name{class_country}
\alias{class_country}
\alias{daedalus_country}
\alias{is_daedalus_country}
\alias{print.daedalus_country}
\title{Represent countries and territories for DAEDALUS}
\usage{
daedalus_country(
  country,
  parameters = list(contact_matrix = NULL, contacts_workplace = NULL,
    contacts_consumer_worker = NULL)
)

is_daedalus_country(x)

\method{print}{daedalus_country}(x, ...)
}
\arguments{
\item{country}{A string giving the country or territory name, or ISO2 or
ISO3 code; must be from among \link{country_codes_iso2c} or
\link{country_codes_iso3c} or \link{country_names}.}

\item{parameters}{An optional named list of country parameters that are
allowed to be modified. Currently, users may only pass their own contact
matrix, workplace contacts, and consumer-worker contact matrix. If these are
not passed, default values are accessed from stored package data.}

\item{x}{An object of the \verb{<daedalus_country>} class.}

\item{...}{Other parameters passed to \code{\link[=print]{print()}}.}
}
\value{
\itemize{
\item \code{daedalus_country()} returns an object of the S3 class \verb{<daedalus_country>}
\item \code{is_daedalus_country()} returns a logical for whether an object is a
\verb{<daedalus_country>}.
\item \code{print.daedalus_country()} invisibly returns the \verb{<daedalus_country>}
object \code{x}. Called for printing side-effects.
}
}
\description{
Helper functions to create and work with S3 class
\verb{<daedalus_country>} objects for use with \code{\link[=daedalus]{daedalus()}}.
These objects store country parameters for reuse and have methods for easy
parameter access and editing, as well as processing raw country
characteristics for the DAEDALUS model.
}
\examples{
x <- daedalus_country("Canada")

x

daedalus_country(
  "United Kingdom",
  parameters = list(contact_matrix = matrix(1, 4, 4))
)

# check whether `x` is a <country> object
is_daedalus_country(x)

# assign class members
# using set_data()
set_data(x, contact_matrix = matrix(99, 4, 4))

# using assignment operators
x$contact_matrix <- matrix(99, 4, 4)
x
}
