[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Imperial College Science, Technology Medicine Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/daedalus.html","id":"representing-countries-and-territories","dir":"Articles","previous_headings":"","what":"Representing countries and territories","title":"Getting started with DAEDALUS","text":"model can run country territory included package data simply passing name daedalus(). country_names vector holds list country territory names data available. Passing country name directly leads model accessing country characteristics stored package data. modify country characteristics, example examine assumptions around changed contact patterns, users instead create object class <daedalus_country>, allows setting certain country characteristics custom values. class also allows users collect country data one place easily. package provides data Walker et al. (2020) country demography, country workforce per economic sector, social contacts age groups country_data. package also provides data Jarvis et al. (2024) workplace contacts economic sectors. datasets accessed internal functions reduce need user input.","code":"# get default values for Canada (chosen for its short name) daedalus_country(\"Canada\") #> <daedalus_country> #> • Name: Canada #> • Demography: 1993132, 5949109, 22966942, and 6832974 #> • Community contact matrix: #>             0-4      5-19    20-64       65+ #> 0-4   1.9157895 1.5235823 5.014414 0.3169637 #> 5-19  0.5104463 8.7459756 6.322175 0.7948344 #> 20-64 0.4351641 1.6376280 7.821398 1.0350292 #> 65+   0.1187166 0.7488765 3.639207 1.5142917  # make a <daedalus_country> representing Canada # and modify contact patterns country_canada <- daedalus_country(   \"Canada\",   parameters = list(     contact_matrix = matrix(5, 4, 4) # uniform contacts across age groups   ) )  # print to examine; only some essential information is shown country_canada #> <daedalus_country> #> • Name: Canada #> • Demography: 1993132, 5949109, 22966942, and 6832974 #> • Community contact matrix: #>      [,1] [,2] [,3] [,4] #> [1,]    5    5    5    5 #> [2,]    5    5    5    5 #> [3,]    5    5    5    5 #> [4,]    5    5    5    5"},{"path":"/articles/daedalus.html","id":"representing-infection-parameters","dir":"Articles","previous_headings":"","what":"Representing infection parameters","title":"Getting started with DAEDALUS","text":"daedalus allows users quickly model one seven historical epidemics accessing infection parameters associated epidemics, stored package data. Epidemics associated infection parameters given package daedalus::epidemic_names. Users can pass epidemic names directly daedalus() use default infection parameters. modify infection parameters associated epidemic, users create <daedalus_infection> class Users can also override epidemic-specific infection parameter values creating <infection> class object. infection() class helper function details parameters included.","code":"daedalus::epidemic_names #> [1] \"sars_cov_1\"           \"influenza_2009\"       \"influenza_1957\"       #> [4] \"influenza_1918\"       \"sars_cov_2_pre_alpha\" \"sars_cov_2_omicron\"   #> [7] \"sars_cov_2_delta\" # not run output <- daedalus(\"Canada\", \"influenza_1918\") # SARS-1 (2004) but with an R0 of 2.3 daedalus_infection(\"sars_cov_1\", r0 = 2.3) #> <daedalus_infection> #> • Epidemic name: sars_cov_1 #> • R0: 2.3 #> • sigma: 0.217 #> • p_sigma: 0.867 #> • epsilon: 0.58 #> • rho: 0.003 #> • eta: 0.018, 0.082, 0.018, and 0.246 #> • omega: 0.012, 0.012, 0.012, and 0.012 #> • gamma_Ia: 0.476 #> • gamma_Is: 0.25 #> • gamma_H: 0.034, 0.034, 0.034, and 0.034  # Influenza 1918 but with mortality rising with age daedalus_infection(\"influenza_1918\", omega = c(0.01, 0.02, 0.03, 0.1)) #> <daedalus_infection> #> • Epidemic name: influenza_1918 #> • R0: 2.5 #> • sigma: 0.909 #> • p_sigma: 0.669 #> • epsilon: 0.58 #> • rho: 0.003 #> • eta: 0.073, 0.064, 0.02, and 0.152 #> • omega: 0.01, 0.02, 0.03, and 0.1 #> • gamma_Ia: 0.4 #> • gamma_Is: 0.4 #> • gamma_H: 0.175, 0.175, 0.175, and 0.175"},{"path":"/articles/daedalus.html","id":"running-the-model","dir":"Articles","previous_headings":"","what":"Running the model","title":"Getting started with DAEDALUS","text":"Run model passing country infection arguments daedalus(). model runs 300 timesteps default; timesteps interpreted days since model parameters terms days. Plot data view epidemic curve.","code":"# simulate a Covid-19 wild type outbreak in Canada; using default parameters data <- daedalus(\"Canada\", \"sars_cov_2_pre_alpha\") ggplot(   data[data$compartment == \"infect_symp\" & data$age_group == \"20-65\", ] ) +   geom_line(     aes(time, value, colour = econ_sector),     show.legend = FALSE   ) +   facet_wrap(     facets = vars(age_group)   )"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pratik Gupte. Author, maintainer. Imperial College Science, Technology Medicine. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gupte P (2024). daedalus: Optimise economic, social health trade-offs pandemic. R package version 0.0.6, https://github.com/j-idea/daedalus.","code":"@Manual{,   title = {daedalus: Optimise economic, social and health trade-offs in a pandemic},   author = {Pratik Gupte},   year = {2024},   note = {R package version 0.0.6},   url = {https://github.com/j-idea/daedalus}, }"},{"path":"/index.html","id":"daedalus-optimise-economic-social-and-health-trade-offs-in-a-pandemic","dir":"","previous_headings":"","what":"Optimise economic, social and health trade-offs in a pandemic","title":"Optimise economic, social and health trade-offs in a pandemic","text":"daedalus implements integrated epidemiological economic model Haw et al. (2022).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Optimise economic, social and health trade-offs in a pandemic","text":"can install development version daedalus GitHub using remotes package.","code":"# install.packages(\"remotes\") remotes::install_github(\"j-idea/daedalus\", upgrade = FALSE)"},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Optimise economic, social and health trade-offs in a pandemic","text":"model can run country territory country_names list passing country name function. automatically pulls country-specific demographic economic data, included package, model (see ‘Get started’ vignette details). Users can select infection parameters among seven epidemics caused directly-transmitted viral respiratory pathogens, stored package daedalus::infection_data, epidemic identifiers stored daedalus::epidemic_names. Users can override default country contact data epidemic-specific infection arguments passing named lists parameters daedalus(); see function documentation details. Users can also model implementation pandemic response measures: see documentation main model function daedalus(), vignette modelling interventions package website.","code":"library(daedalus)  # run model for Canada data <- daedalus(\"Canada\", \"influenza_1918\")  head(data) #>   time age_group compartment econ_sector   value #> 1    1       0-4 susceptible   sector_00 1993130 #> 2    2       0-4 susceptible   sector_00 1993128 #> 3    3       0-4 susceptible   sector_00 1993126 #> 4    4       0-4 susceptible   sector_00 1993123 #> 5    5       0-4 susceptible   sector_00 1993118 #> 6    6       0-4 susceptible   sector_00 1993109"},{"path":"/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related projects","title":"Optimise economic, social and health trade-offs in a pandemic","text":"daedalus R implementation scenario model project economics pandemic preparedness.","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Optimise economic, social and health trade-offs in a pandemic","text":"Haw, David J., Giovanni Forchini, Patrick Doohan, Paula Christen, Matteo Pianella, Robert Johnson, Sumali Bajaj, et al. 2022. “Optimizing Social Economic Activity Containing SARS-CoV-2 Transmission Using DAEDALUS.” Nature Computational Science 2 (4): 223–33. https://doi.org/10.1038/s43588-022-00233-0.","code":""},{"path":"/reference/class_country.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent countries and territories for DAEDALUS — class_country","title":"Represent countries and territories for DAEDALUS — class_country","text":"Helper functions create work S3 class <daedalus_country> objects use daedalus(). objects store country parameters reuse methods easy parameter access editing, well processing raw country characteristics DAEDALUS model.","code":""},{"path":"/reference/class_country.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent countries and territories for DAEDALUS — class_country","text":"","code":"daedalus_country(   name,   parameters = list(contact_matrix = NULL, contacts_workplace = NULL,     contacts_consumer_worker = NULL) )  is_daedalus_country(x)  # S3 method for class 'daedalus_country' print(x, ...)"},{"path":"/reference/class_country.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent countries and territories for DAEDALUS — class_country","text":"name string giving country territory name; must among country_names. parameters optional named list country parameters allowed modified. Currently, users may pass contact matrix, workplace contacts, consumer-worker contact matrix. passed, default values accessed stored package data. x object <daedalus_country> class. ... parameters passed print().","code":""},{"path":"/reference/class_country.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent countries and territories for DAEDALUS — class_country","text":"daedalus_country() returns object S3 class <daedalus_country> is_daedalus_country() returns logical whether object <daedalus_country>. print.daedalus_country() invisibly returns <daedalus_country> object x. Called printing side-effects.","code":""},{"path":"/reference/class_country.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Represent countries and territories for DAEDALUS — class_country","text":"","code":"x <- daedalus_country(\"Canada\")  x #> <daedalus_country> #> • Name: Canada #> • Demography: 1993132, 5949109, 22966942, and 6832974 #> • Community contact matrix: #>             0-4      5-19    20-64       65+ #> 0-4   1.9157895 1.5235823 5.014414 0.3169637 #> 5-19  0.5104463 8.7459756 6.322175 0.7948344 #> 20-64 0.4351641 1.6376280 7.821398 1.0350292 #> 65+   0.1187166 0.7488765 3.639207 1.5142917  daedalus_country(   \"United Kingdom\",   parameters = list(contact_matrix = matrix(1, 4, 4)) ) #> <daedalus_country> #> • Name: United Kingdom #> • Demography: 3924490, 11762039, 39536463, and 12663012 #> • Community contact matrix: #>      [,1] [,2] [,3] [,4] #> [1,]    1    1    1    1 #> [2,]    1    1    1    1 #> [3,]    1    1    1    1 #> [4,]    1    1    1    1  # check whether `x` is a <country> object is_daedalus_country(x) #> [1] TRUE  # assign class members # using set_data() set_data(x, contact_matrix = matrix(99, 4, 4)) #> <daedalus_country> #> • Name: Canada #> • Demography: 1993132, 5949109, 22966942, and 6832974 #> • Community contact matrix: #>      [,1] [,2] [,3] [,4] #> [1,]   99   99   99   99 #> [2,]   99   99   99   99 #> [3,]   99   99   99   99 #> [4,]   99   99   99   99  # using assignment operators x$contact_matrix <- matrix(99, 4, 4) x #> <daedalus_country> #> • Name: Canada #> • Demography: 1993132, 5949109, 22966942, and 6832974 #> • Community contact matrix: #>      [,1] [,2] [,3] [,4] #> [1,]   99   99   99   99 #> [2,]   99   99   99   99 #> [3,]   99   99   99   99 #> [4,]   99   99   99   99"},{"path":"/reference/class_infection.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent countries and territories for DAEDALUS — class_infection","title":"Represent countries and territories for DAEDALUS — class_infection","text":"Helper functions create work S3 class <daedalus_infection> objects use daedalus(). objects store infection parameters reuse methods easy parameter access editing, well processing raw infection characteristics DAEDALUS model.","code":""},{"path":"/reference/class_infection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent countries and territories for DAEDALUS — class_infection","text":"","code":"daedalus_infection(name, ...)  is_daedalus_infection(x)  # S3 method for class 'daedalus_infection' print(x, ...)"},{"path":"/reference/class_infection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent countries and territories for DAEDALUS — class_infection","text":"name epidemic name among epidemic_names. Selecting epidemic automatically pulls infection parameters associated epidemic; stored packaged data daedalus::infection_data. Default infection parameters epidemics can -ridden passing named list .... ... parameters passed print(). x object <daedalus_infection> class.","code":""},{"path":"/reference/class_infection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent countries and territories for DAEDALUS — class_infection","text":"daedalus_infection() returns object S3 class <daedalus_infection>. is_daedalus_infection() returns logical whether object <daedalus_infection>. print.daedalus_infection() invisibly returns <daedalus_infection> object x. Called printing side-effects.","code":""},{"path":[]},{"path":"/reference/class_infection.html","id":"included-epidemics","dir":"Reference","previous_headings":"","what":"Included epidemics","title":"Represent countries and territories for DAEDALUS — class_infection","text":"Epidemics data available given (pathogen parentheses). string indicates name must passed name argument. \"sars_cov_1\": SARS 2004 (SARS-CoV-1), \"influenza_2009\": influenza 2009 (influenza H1N1), \"influenza_1957\": influenza 1957 (influenza H2N2), \"influenza_1918\": influenza 1918 (influenza H1N1), \"sars_cov_2_pre_alpha\": Covid-19 wild type (SARS-Cov-2 wild type), \"sars_cov_2_omicron\": Covid-19 Omicron (SARS-CoV-2 omicron), \"sars_cov_2_pre_delta\": (SARS-CoV-2 delta).","code":""},{"path":"/reference/class_infection.html","id":"infection-parameters","dir":"Reference","previous_headings":"","what":"Infection parameters","title":"Represent countries and territories for DAEDALUS — class_infection","text":"infections following parameters, take default values stored package infection_data. Users can pass custom values parameters arguments via .... r0: single numeric value basic reproduction value infection \\(R_0\\). sigma: single numeric value > 0.0 rate transition exposed compartment one two infectious compartments. p_sigma: single numeric value range \\([0.0, 1.0]\\) proportion infectious individuals also symptomatic. Asymptomatic individuals can different contribution force infection symptomatic individuals. epsilon: single numeric value relative contribution asymptomatic infectious individuals force infection (compared symptomatic individuals). gamma_Is: single numeric value recovery rate infectious individuals hospitalised. gamma_Ia: single numeric value recovery rate asymptomatic infection. gamma_H: numeric vector length N_AGE_GROUPS (4) age-specific recovery rate individuals hospitalised. eta: numeric vector length N_AGE_GROUPS (4) age-specific hospitalisation rate individuals infectious symptomatic. omega: numeric vector length N_AGE_GROUPS (4) age-specific mortality rate individuals hospitalised. rho: single numeric value rate infection-derived immunity wanes, returning individuals 'recovered' compartment 'susceptible' compartment.","code":""},{"path":"/reference/class_infection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Represent countries and territories for DAEDALUS — class_infection","text":"","code":"# make a <daedalus_infection> object with default parameter values daedalus_infection(\"sars_cov_1\") #> <daedalus_infection> #> • Epidemic name: sars_cov_1 #> • R0: 1.75 #> • sigma: 0.217 #> • p_sigma: 0.867 #> • epsilon: 0.58 #> • rho: 0.003 #> • eta: 0.018, 0.082, 0.018, and 0.246 #> • omega: 0.012, 0.012, 0.012, and 0.012 #> • gamma_Ia: 0.476 #> • gamma_Is: 0.25 #> • gamma_H: 0.034, 0.034, 0.034, and 0.034  # modify infection parameters R0 and immunity waning rate daedalus_infection(\"influenza_1918\", r0 = 2.5, rho = 0.01) #> <daedalus_infection> #> • Epidemic name: influenza_1918 #> • R0: 2.5 #> • sigma: 0.909 #> • p_sigma: 0.669 #> • epsilon: 0.58 #> • rho: 0.01 #> • eta: 0.073, 0.064, 0.02, and 0.152 #> • omega: 0.025, 0.025, 0.025, and 0.025 #> • gamma_Ia: 0.4 #> • gamma_Is: 0.4 #> • gamma_H: 0.175, 0.175, 0.175, and 0.175"},{"path":"/reference/closure_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Pandemic response strategy data for DAEDALUS — closure_data","title":"Pandemic response strategy data for DAEDALUS — closure_data","text":"Coefficients openness economic sectors different pandemic response strategies. four strategies (including response), two levels implementation (\"heavy\" \"light\").","code":""},{"path":"/reference/closure_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pandemic response strategy data for DAEDALUS — closure_data","text":"","code":"closure_data"},{"path":[]},{"path":"/reference/closure_data.html","id":"closure-data","dir":"Reference","previous_headings":"","what":"closure_data","title":"Pandemic response strategy data for DAEDALUS — closure_data","text":"list 4 elements, corresponding pandemic response strategy, 2 elements (\"heavy\" \"light\") giving coefficients sector openness different levels implementation. none economic sectors fully open pandemic response. elimination Openness coefficients elimination strategy. economic_closures Openness coefficients strategy mostly economic closures. school_closures Openness coefficients strategy mostly school closures.","code":""},{"path":"/reference/closure_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pandemic response strategy data for DAEDALUS — closure_data","text":"Multiple sources; updated shortly. See processing details `data-raw/closure_data.R","code":""},{"path":"/reference/country_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Country demographic data for DAEDALUS — country_data","title":"Country demographic data for DAEDALUS — country_data","text":"Country-wise data demography, social contacts, workforce participation economic sectors. Demography social contacts presented four bins: [0, 4], [5, 19], [20, 64], [65, ] (combining individuals aged 65 higher). Workforce participation presented counts assumed subset [20, 64] age-bin. Note zero values worker participation data may reflect missing data particular sector.","code":""},{"path":"/reference/country_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Country demographic data for DAEDALUS — country_data","text":"","code":"country_data"},{"path":[]},{"path":"/reference/country_data.html","id":"country-data","dir":"Reference","previous_headings":"","what":"country_data","title":"Country demographic data for DAEDALUS — country_data","text":"list 197 elements, corresponding recognised country territory. demography four value named vector number individuals demographic group. contact_matrix 16-element square matrix giving mean number social contacts individuals four age groups. workers 45-element vector giving number individuals economic sector included model.","code":""},{"path":"/reference/country_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Country demographic data for DAEDALUS — country_data","text":"doi:10.1126/science.abc0035 ; see processing details `data-raw/country_data.R","code":""},{"path":"/reference/country_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Country names for DAEDALUS — country_names","title":"Country names for DAEDALUS — country_names","text":"Names countries territories included package.","code":""},{"path":"/reference/country_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Country names for DAEDALUS — country_names","text":"","code":"country_names"},{"path":[]},{"path":"/reference/country_names.html","id":"country-names","dir":"Reference","previous_headings":"","what":"country_names","title":"Country names for DAEDALUS — country_names","text":"character vector recognised country territory names.","code":""},{"path":"/reference/daedalus-package.html","id":null,"dir":"Reference","previous_headings":"","what":"daedalus: Optimise economic, social and health trade-offs in a pandemic — daedalus-package","title":"daedalus: Optimise economic, social and health trade-offs in a pandemic — daedalus-package","text":"Model optimise trade-offs social economic activity containing pandemic, presented Haw et al. (2022) <doi.org/10.1038/s43588-022-00233-0>.","code":""},{"path":[]},{"path":"/reference/daedalus-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"daedalus: Optimise economic, social and health trade-offs in a pandemic — daedalus-package","text":"Maintainer: Pratik Gupte p.gupte24@imperial.ac.uk (ORCID) contributors: Imperial College Science, Technology Medicine [copyright holder]","code":""},{"path":"/reference/daedalus.html","id":null,"dir":"Reference","previous_headings":"","what":"DAEDALUS model for health, social and economic costs of a pandemic — daedalus","title":"DAEDALUS model for health, social and economic costs of a pandemic — daedalus","text":"Run DAEDALUS model R. work progress.","code":""},{"path":"/reference/daedalus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAEDALUS model for health, social and economic costs of a pandemic — daedalus","text":"","code":"daedalus(   country,   infection,   response_strategy = c(\"none\", \"elimination\", \"economic_closures\", \"school_closures\"),   implementation_level = c(\"light\", \"heavy\"),   response_time = 30,   response_threshold = 1000,   initial_state_manual = list(),   time_end = 300 )"},{"path":"/reference/daedalus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DAEDALUS model for health, social and economic costs of a pandemic — daedalus","text":"country country territory object class <daedalus_country>, country territory name included package; see country_names. Country-specific data community workplace contacts, demography, distribution workforce economic sectors automatically accessed package data relevant country name passed string. override package defaults country characteristics, pass <daedalus_country> object instead. See daedalus_country() . infection infection parameter object class <infection>, epidemic name data provided package; see epidemic_names parameters historical epidemic epidemic wave. Passing name string automatically accesses default parameters infection. Create pass <daedalus_infection> tweak infection parameters. response_strategy string name response strategy followed; defaults \"none\". response strategy determines country-specific response threshold following response activated. See response_threshold. response strategy active, economic contacts scaled using package data object daedalus::closure_data. implementation_level string level strategy implemented; defaults \"light\". response_time single numeric value time days selected response activated. ignored response already activated hospitalisation threshold reached. Defaults 30 days. response_threshold single numeric value total number hospitalisations causes epidemic response (specified response_strategy) triggered, already triggered via response_time. Currently defaults 1000, overrides default response- country-specific threshold values held country_data. initial_state_manual optional named list names p_infectious p_asymptomatic proportion infectious symptomatic individuals age group economic sector. Defaults 1e-6 0.0 respectively. time_end integer-like value number timesteps return data. treated number days data returned day. Defaults 300 days.","code":""},{"path":"/reference/daedalus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DAEDALUS model for health, social and economic costs of a pandemic — daedalus","text":"<deSolve> object.","code":""},{"path":[]},{"path":"/reference/daedalus.html","id":"initial-state","dir":"Reference","previous_headings":"","what":"Initial state","title":"DAEDALUS model for health, social and economic costs of a pandemic — daedalus","text":"Users can pass following initial state parameters initial_state_manual: p_infectious: single numeric value range \\([0.0, 1.0]\\) giving proportion individuals age group economic sector initialised infectious. Defaults 1e-6, one every one million infectious. p_asymptomatic: single numeric value range \\([0.0, 1.0]\\) proportion initially infectious individuals considered asymptomatic. Defaults 0.0.","code":""},{"path":"/reference/daedalus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DAEDALUS model for health, social and economic costs of a pandemic — daedalus","text":"","code":"# country and infection specified by strings using default characteristics output <- daedalus(   \"Canada\", \"influenza_1918\" )  # country passed as <daedalus_country> with some characteristics modified country_x <- daedalus_country(   \"Canada\",   parameters = list(contact_matrix = matrix(5, 4, 4)) # uniform contacts ) output <- daedalus(country_x, \"influenza_1918\")  # with some infection parameters over-ridden by the user output <- daedalus(   \"United Kingdom\",   daedalus_infection(\"influenza_1918\", r0 = 1.3) )  # with default initial conditions over-ridden by the user output <- daedalus(   \"United Kingdom\", \"influenza_1918\",   initial_state_manual = list(p_infectious = 1e-3) )"},{"path":"/reference/daedalus_rhs.html","id":null,"dir":"Reference","previous_headings":"","what":"DAEDALUS system of ODEs — daedalus_rhs","title":"DAEDALUS system of ODEs — daedalus_rhs","text":"compartmental epidemiological model four age groups. function intended passed solvers deSolve package. work progress additional components added future.","code":""},{"path":"/reference/daedalus_rhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAEDALUS system of ODEs — daedalus_rhs","text":"","code":"daedalus_rhs(t, state, parameters)"},{"path":"/reference/daedalus_rhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DAEDALUS system of ODEs — daedalus_rhs","text":"t single double value time. state Vector initial state. form vector \\(X_i, X \\S, E, I_s, I_a, R, H, D\\), values compartments age group \\(\\) given consecutively. May matrix allow multiple age groups. See daedalus() explanation epidemiological compartments. parameters List parameters used simulation. See daedalus() list model parameters.","code":""},{"path":"/reference/daedalus_rhs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DAEDALUS system of ODEs — daedalus_rhs","text":"list single numeric vector size state, suitable output deSolve functions deSolve::lsoda().","code":""},{"path":"/reference/daedalus_rhs.html","id":"details-daedalus-model","dir":"Reference","previous_headings":"","what":"Details: DAEDALUS model","title":"DAEDALUS system of ODEs — daedalus_rhs","text":"section work progress, describes DAEDALUS model brief. model age-stratified, supports heterogeneity social contacts age groups, currently supports four age groups.","code":""},{"path":"/reference/daedalus_rhs.html","id":"epidemiological-model","dir":"Reference","previous_headings":"","what":"Epidemiological model","title":"DAEDALUS system of ODEs — daedalus_rhs","text":"model following epidemiological compartments: susceptible (\\(S\\)), exposed (\\(E\\)), infectious symptomatic (\\(I_s\\)), infectious asymptomatic (\\(I_a\\)), hospitalised (\\(H\\)), recovered (\\(R\\)), dead (\\(D\\)). model currently allows uniform parameters transitions compartments. Group specific parameters expected supported future.","code":""},{"path":"/reference/economic_contacts.html","id":null,"dir":"Reference","previous_headings":"","what":"Economic sector contacts data for DAEDALUS — economic_contacts","title":"Economic sector contacts data for DAEDALUS — economic_contacts","text":"Data per-capita social contacts within economic sector DAEDALUS model.","code":""},{"path":"/reference/economic_contacts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Economic sector contacts data for DAEDALUS — economic_contacts","text":"","code":"economic_contacts"},{"path":[]},{"path":"/reference/economic_contacts.html","id":"economic-contacts","dir":"Reference","previous_headings":"","what":"economic_contacts","title":"Economic sector contacts data for DAEDALUS — economic_contacts","text":"list two elements: contacts_workplace numeric vector N_ECON_SECTORS (45) elements, giving per-capita contacts workers within economic sector. contacts_between_sectors square matrix values set \\(10^{-6}\\), diagonal set zero, number contacts workers across economic sectors.","code":""},{"path":"/reference/economic_contacts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Economic sector contacts data for DAEDALUS — economic_contacts","text":"Adapted doi:10.1016/j.epidem.2024.100778 ; see processing details `data-raw/economic_contacts.R","code":""},{"path":"/reference/epi_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Epidemiological compartments and indices — epi_constants","title":"Epidemiological compartments and indices — epi_constants","text":"Names indices epidemiological compartments used DAEDALUS, reuse model code.","code":""},{"path":"/reference/epi_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Epidemiological compartments and indices — epi_constants","text":"","code":"COMPARTMENTS  i_S  i_E  i_Is  i_Ia  i_H  i_R  i_D  N_EPI_COMPARTMENTS"},{"path":"/reference/epi_constants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Epidemiological compartments and indices — epi_constants","text":"object class character length 7. object class integer length 1. object class integer length 1. object class integer length 1. object class integer length 1. object class integer length 1. object class integer length 1. object class integer length 1. object class integer length 1.","code":""},{"path":"/reference/epi_constants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Epidemiological compartments and indices — epi_constants","text":"COMPARTMENTS returns character vector epidemiological compartment names. constants return integer values.","code":""},{"path":"/reference/epi_constants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Epidemiological compartments and indices — epi_constants","text":"DAEDALUS 7 epidemiological compartments: susceptible, exposed, infectious symptomatic (\"infect_symp\"), infectious asymptomatic (\"infect_asymp\") , hospitalised, recovered, dead.","code":""},{"path":"/reference/epidemic_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Infection characteristics for model epidemics — epidemic_data","title":"Infection characteristics for model epidemics — epidemic_data","text":"Infection parameters used DAEDALUS simulate epidemics interest. epidemic_names provides tags epidemics known users' convenience.","code":""},{"path":"/reference/epidemic_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infection characteristics for model epidemics — epidemic_data","text":"","code":"infection_data  infection_parameter_names  epidemic_names"},{"path":[]},{"path":"/reference/epidemic_data.html","id":"infection-data","dir":"Reference","previous_headings":"","what":"infection_data","title":"Infection characteristics for model epidemics — epidemic_data","text":"list 7 elements, corresponding epidemic (see Details), providing 10 infection parameters: r0: single numeric value basic reproduction value infection \\(R_0\\). sigma: single numeric value > 0.0 rate transition exposed compartment one two infectious compartments. p_sigma: single numeric value range \\((0.0, 1.0)\\) proportion infectious individuals also symptomatic. Asymptomatic individuals can different contribution force infection symptomatic individuals. epsilon: single numeric value relative contribution asymptomatic infectious individuals force infection (compared symptomatic individuals). gamma_Is: single numeric value recovery rate infectious individuals hospitalised. gamma_Ia: single numeric value recovery rate asymptomatic infection. gamma_H: numeric vector length 4 age-specific recovery rate individuals hospitalised. eta: numeric vector length N_AGE_GROUPS (4) age-specific hospitalisation rate individuals infectious symptomatic. omega: numeric vector length N_AGE_GROUPS (4) age-specific mortality rate individuals hospitalised. rho: single numeric value rate infection-derived immunity wanes, returning individuals 'recovered' compartment 'susceptible' compartment.","code":""},{"path":"/reference/epidemic_data.html","id":"infection-parameter-names","dir":"Reference","previous_headings":"","what":"infection_parameter_names","title":"Infection characteristics for model epidemics — epidemic_data","text":"character vector 10 names infection parameters infection_data. Mainly internal use.","code":""},{"path":"/reference/epidemic_data.html","id":"epidemic-names","dir":"Reference","previous_headings":"","what":"epidemic_names","title":"Infection characteristics for model epidemics — epidemic_data","text":"character vector 7 elements.","code":""},{"path":"/reference/epidemic_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Infection characteristics for model epidemics — epidemic_data","text":"See processing details `data-raw/infection_data.R","code":""},{"path":"/reference/epidemic_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infection characteristics for model epidemics — epidemic_data","text":"Epidemics data available (pathogen parentheses): SARS 2004 (SARS-CoV-1) Influenza 2009 (influenza H1N1) Influenza 1957 (influenza H2N2) Influenza 1918 (influenza H1N1) Covid-19 wild type (SARS-Cov-2 wild type) Covid-19 Omicron (SARS-CoV-2 omicron) Covid-19 Delta (SARS-CoV-2 delta).","code":""},{"path":"/reference/epidemic_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infection characteristics for model epidemics — epidemic_data","text":"","code":"# check available epidemics epidemic_names #> [1] \"sars_cov_1\"           \"influenza_2009\"       \"influenza_1957\"       #> [4] \"influenza_1918\"       \"sars_cov_2_pre_alpha\" \"sars_cov_2_omicron\"   #> [7] \"sars_cov_2_delta\""},{"path":"/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get parameters from DAEDALUS classes — get_data","title":"Get parameters from DAEDALUS classes — get_data","text":"Generic methods S3 classes safely getting class parameters.","code":""},{"path":"/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get parameters from DAEDALUS classes — get_data","text":"","code":"# S3 method for class 'daedalus_country' get_data(x, to_get, ...)  # S3 method for class 'daedalus_infection' get_data(x, to_get, ...)  get_data(x, to_get, ...)"},{"path":"/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get parameters from DAEDALUS classes — get_data","text":"x S3 class object daedalus package <daedalus_country> <infection> class. to_get string giving name element x return. ... <dynamic-dots> arguments class methods. Class methods currently support arguments.","code":""},{"path":"/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get parameters from DAEDALUS classes — get_data","text":"Returns member x, class preserved (e.g. numeric vector country \"demography\").","code":""},{"path":"/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get parameters from DAEDALUS classes — get_data","text":"","code":"# simple example of getting data country_A <- daedalus_country(\"United Kingdom\") get_data(country_A, \"demography\") #>      0-4     5-19    20-64      65+  #>  3924490 11762039 39536463 12663012   get_data(country_A, \"contact_matrix\") #>             0-4      5-19    20-64       65+ #> 0-4   1.9157895 1.5379290 4.704999 0.2863619 #> 5-19  0.5131412 8.7339228 5.874591 0.7418483 #> 20-64 0.4670302 1.7476822 7.830182 1.0685802 #> 65+   0.1180517 0.7548304 3.531487 1.5212437  disease_x <- daedalus_infection(\"sars_cov_1\", r0 = 1.9) get_data(disease_x, \"r0\") #> [1] 1.9"},{"path":"/reference/get_hospitalisations.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate total hospitalisations — get_hospitalisations","title":"Calculate total hospitalisations — get_hospitalisations","text":"Calculate total hospitalisations","code":""},{"path":"/reference/get_hospitalisations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate total hospitalisations — get_hospitalisations","text":"","code":"get_hospitalisations(state)"},{"path":"/reference/get_hospitalisations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate total hospitalisations — get_hospitalisations","text":"state ODE state variable array. Must least i_H columns.","code":""},{"path":"/reference/make_initial_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a default initial state for DAEDALUS — make_initial_state","title":"Generate a default initial state for DAEDALUS — make_initial_state","text":"Function prepare model initial state.","code":""},{"path":"/reference/make_initial_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a default initial state for DAEDALUS — make_initial_state","text":"","code":"make_initial_state(country, initial_state_manual)"},{"path":"/reference/make_initial_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a default initial state for DAEDALUS — make_initial_state","text":"country country territory object class <daedalus_country>, country territory name included package; see country_names. Country-specific data community workplace contacts, demography, distribution workforce economic sectors automatically accessed package data relevant country name passed string. override package defaults country characteristics, pass <daedalus_country> object instead. See daedalus_country() . initial_state_manual optional named list names p_infectious p_asymptomatic proportion infectious symptomatic individuals age group economic sector. Defaults 1e-6 0.0 respectively.","code":""},{"path":"/reference/make_initial_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a default initial state for DAEDALUS — make_initial_state","text":"array many dimensions N_ECON_STRATA (currently, 46) layer giving proportion individuals group epidemiological compartment.","code":""},{"path":"/reference/make_response_threshold_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Event and root-finding functions to trigger response strategies — make_response_threshold_event","title":"Event and root-finding functions to trigger response strategies — make_response_threshold_event","text":"Prepare functions can passed deSolve::lsoda() event root-finding functions, trigger response strategies reduce disease transmission.","code":""},{"path":"/reference/make_response_threshold_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event and root-finding functions to trigger response strategies — make_response_threshold_event","text":"","code":"make_response_threshold_event(response_threshold)"},{"path":"/reference/make_response_threshold_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Event and root-finding functions to trigger response strategies — make_response_threshold_event","text":"response_threshold single numeric value total number hospitalisations causes epidemic response (specified response_strategy) triggered, already triggered via response_time. Currently defaults 1000, overrides default response- country-specific threshold values held country_data.","code":""},{"path":"/reference/make_rt_end_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Event and root-finding functions to terminate epidemic responses — make_rt_end_event","title":"Event and root-finding functions to terminate epidemic responses — make_rt_end_event","text":"Prepare functions can passed deSolve::lsoda() event root-finding functions, trigger end interventions scale disease transmission.","code":""},{"path":"/reference/make_rt_end_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event and root-finding functions to terminate epidemic responses — make_rt_end_event","text":"","code":"make_rt_end_event()"},{"path":"/reference/model_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"DAEDALUS model constants — model_constants","title":"DAEDALUS model constants — model_constants","text":"Frequently used values DAEDALUS model related model population structure. See also epi_constants constants specific epidemiological model.","code":""},{"path":"/reference/model_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DAEDALUS model constants — model_constants","text":"","code":"N_AGE_GROUPS  N_VACCINE_STRATA  AGE_GROUPS  i_WORKING_AGE  N_ECON_SECTORS  N_ECON_STRATA  i_NOT_WORKING  DIM_AGE_GROUPS  DIM_EPI_COMPARTMENTS  DIM_ECON_SECTORS  N_OUTPUT_COLS"},{"path":"/reference/model_constants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DAEDALUS model constants — model_constants","text":"object class integer length 1. object class integer length 1. object class character length 4. object class integer length 1. object class integer length 1. object class integer length 1. object class integer length 1. object class integer length 1. object class integer length 1. object class integer length 1. object class integer length 1.","code":""},{"path":"/reference/model_constants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DAEDALUS model constants — model_constants","text":"Values model constants.","code":""},{"path":"/reference/model_constants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DAEDALUS model constants — model_constants","text":"DAEDALUS model requires following values fixed. Number age groups: 4 Number vaccination strata: 1 Age group bins: 0-4 years, 5-19 years, 20-65 years (working age), 65+ years Index working-age age groups: 3; see AGE_GROUPS Number economic sectors: 45 Index individuals working layer 3D state tensor: 1 Number economic strata: 46; note always one number economic sectors, additional stratum work includes individuals working age, proportion working age individuals. Array dimension age groups: 1 Array dimension epidemiological compartments: 2 Array dimension economic sectors: 3","code":""},{"path":"/reference/prepare_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare DAEDALUS data — prepare_output","title":"Prepare DAEDALUS data — prepare_output","text":"Convert DAEDALUS data long-format <data.frame>.","code":""},{"path":"/reference/prepare_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare DAEDALUS data — prepare_output","text":"","code":"prepare_output(output)"},{"path":"/reference/prepare_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare DAEDALUS data — prepare_output","text":"output Output daedalus() class <deSolve>.","code":""},{"path":"/reference/prepare_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare DAEDALUS data — prepare_output","text":"<data.frame> long 'tidy' format columns \"time\", \"age_group\", \"compartment\", \"econ_sector\", \"value\", age-group specific value number individuals economic sector epidemiological compartment timestep.","code":""},{"path":"/reference/prepare_output.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare DAEDALUS data — prepare_output","text":"45 economic sectors, given N_ECON_SECTORS, first 'sector' representing non-working individuals. age groups considered non-working first sector (children retirees), working-age individuals may distributed flexibly various economic sectors (including non-working).","code":""},{"path":"/reference/prepare_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare country parameters for model — prepare_parameters","title":"Prepare country parameters for model — prepare_parameters","text":"Generic prepare_parameters methods associated daedalus classes.","code":""},{"path":"/reference/prepare_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare country parameters for model — prepare_parameters","text":"","code":"# S3 method for class 'daedalus_country' prepare_parameters(x)  # S3 method for class 'daedalus_infection' prepare_parameters(x, ...)  prepare_parameters(x, ...)"},{"path":"/reference/prepare_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare country parameters for model — prepare_parameters","text":"x S3 object appropriate method. ... used; included compatibility methods.","code":""},{"path":"/reference/prepare_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare country parameters for model — prepare_parameters","text":"list parameters suitable DAEDALUS model. prepare_parameters.daedalus_country() returns country parameters, prepare_parameters.daedalus_infection() returns infection parameters.","code":""},{"path":[]},{"path":"/reference/prepare_parameters.html","id":"country-parameters","dir":"Reference","previous_headings":"","what":"Country parameters","title":"Prepare country parameters for model — prepare_parameters","text":"Country contact data processed follows: contact_matrix: scaled leading eigenvalue, column j scaled j-th element country demography vector (.e., scaling contacts age group size group). returned parameter list consists : demography: demography vector; contact_matrix: scaled contact matrix suitable multiplication \\(R_0\\) force infection calculations; contacts_workplace: contacts workplaces scaled largest value (leading eigenvalue diagonal matrix contacts); contacts_consumer_worker: contacts workplaces distributed proportion demography distribution, scaled largest singular value (similar eigenvalue non-square matrices). contacts_between_sectors: dummy matrix zeros future use.","code":""},{"path":"/reference/prepare_parameters.html","id":"infection-parameters","dir":"Reference","previous_headings":"","what":"Infection parameters","title":"Prepare country parameters for model — prepare_parameters","text":"Infection parameters returned <daedalusinfection> objects without modification name removed.","code":""},{"path":"/reference/reff_calculation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the effective R — reff_calculation","title":"Calculate the effective R — reff_calculation","text":"simple calculation effective \\(R_\\text{eff}\\), allowing heterogeneity social contacts proportion age group remaining susceptible. assumes single susceptible stratum full susceptibility, updated future versions account addition vaccination strata reduced susceptibility.","code":""},{"path":"/reference/reff_calculation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the effective R — reff_calculation","text":"","code":"r_eff(r0, state, cm)"},{"path":"/reference/reff_calculation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the effective R — reff_calculation","text":"r0 basic reproduction number. state ODE state variable. Must array. cm contact matrix.","code":""},{"path":"/reference/reff_calculation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the effective R — reff_calculation","text":"single numeric value \\(R_\\text{eff}\\).","code":""},{"path":"/reference/set_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameters in DAEDALUS classes — set_data","title":"Set parameters in DAEDALUS classes — set_data","text":"Generic methods S3 classes safely setting class parameters. parameters considered safe change – mostly contact data <country>, parameters <infection> – can changed way.","code":""},{"path":"/reference/set_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set parameters in DAEDALUS classes — set_data","text":"","code":"# S3 method for class 'daedalus_country' set_data(x, ...)  # S3 method for class 'daedalus_infection' set_data(x, ...)  set_data(x, ...)"},{"path":"/reference/set_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameters in DAEDALUS classes — set_data","text":"x S3 class object daedalus package <daedalus_country> <infection> class. ... <dynamic-dots> Named optional arguments parameters changed, new values. values allowed <daedalus_country> objects \"contact_matrix\", \"contacts_workplace\", \"contacts_consumer_worker\".","code":""},{"path":"/reference/set_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameters in DAEDALUS classes — set_data","text":"S3 object class input x.","code":""},{"path":"/reference/set_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameters in DAEDALUS classes — set_data","text":"","code":"# simple example of setting all contacts to 1 country_A <- daedalus_country(\"United Kingdom\") country_A #> <daedalus_country> #> • Name: United Kingdom #> • Demography: 3924490, 11762039, 39536463, and 12663012 #> • Community contact matrix: #>             0-4      5-19    20-64       65+ #> 0-4   1.9157895 1.5379290 4.704999 0.2863619 #> 5-19  0.5131412 8.7339228 5.874591 0.7418483 #> 20-64 0.4670302 1.7476822 7.830182 1.0685802 #> 65+   0.1180517 0.7548304 3.531487 1.5212437  country_A <- set_data(country_A, contact_matrix = matrix(1, 4, 4)) country_A #> <daedalus_country> #> • Name: United Kingdom #> • Demography: 3924490, 11762039, 39536463, and 12663012 #> • Community contact matrix: #>      [,1] [,2] [,3] [,4] #> [1,]    1    1    1    1 #> [2,]    1    1    1    1 #> [3,]    1    1    1    1 #> [4,]    1    1    1    1  disease_x <- daedalus_infection(\"sars_cov_1\") disease_x <- set_data(disease_x, r0 = 3.0) disease_x #> <daedalus_infection> #> • Epidemic name: sars_cov_1 #> • R0: 3 #> • sigma: 0.217 #> • p_sigma: 0.867 #> • epsilon: 0.58 #> • rho: 0.003 #> • eta: 0.018, 0.082, 0.018, and 0.246 #> • omega: 0.012, 0.012, 0.012, and 0.012 #> • gamma_Ia: 0.476 #> • gamma_Is: 0.25 #> • gamma_H: 0.034, 0.034, 0.034, and 0.034"},{"path":"/news/index.html","id":"daedalus-006","dir":"Changelog","previous_headings":"","what":"daedalus 0.0.6","title":"daedalus 0.0.6","text":"patch adds <daedalus_infection> class represent hold infection parameter data daedalus(). Access, assignment, print methods also added, addition internal helpers as_country(). class tested newly added tests. changes: get_data(), set_data() prepare_parameters() generics now methods <daedalus_infection>s. Removes make_infection_parameters() favour prepare_parameters.infection(). daedalus() argument epidemic accepting epidemic name string changed argument infection accepting <daedalus_infection> objects epidemic names. Vignettes updated use <daedalus_infection> objects. Website reference page updated sections.","code":""},{"path":"/news/index.html","id":"daedalus-005","dir":"Changelog","previous_headings":"","what":"daedalus 0.0.5","title":"daedalus 0.0.5","text":"patch adds <daedalus_country> class represent country territory data daedalus(). Access, assignment, print methods also added, addition internal helpers as_daedalus_country(). class tested newly added tests. changes: Adds generic functions get_data(), set_data() prepare_parameters(), methods <daedalus_country> objects. Methods infection data also anticipated. Removes make_country_parameters() favour prepare_parameters.daedalus_country(). daedalus() accepts first argument either country name <daedalus_country>, longer accepts country_params_manual argument; changes country parameters made via class. make_initial_state() works <daedalus_country> objects instead country names. Since internal function support passing country string name. Vignettes updated show use <daedalus_country> objects.","code":""},{"path":"/news/index.html","id":"daedalus-004","dir":"Changelog","previous_headings":"","what":"daedalus 0.0.4","title":"daedalus 0.0.4","text":"patch adds basic pandemic response functionality (#15). functionality shown new vignette thresholded_interventions.Rmd. function signature daedalus() changed accept response_strategy, implementation_level, response_time, response_threshold arguments specify parameters. Sensible defaults strategy “none”, “light” implementation level strategies. model supports “none”, “economic closures”, “school closures”, “elimination” strategies, economic sector openness coefficients “light” “heavy” implementation strategies stored package data object closure_data. data-raw/closure_data.R file shows data generated raw data files provided EPPI added inst/extdata. Closures triggered response time reached, total hospitalisation reaching response threshold. state variable expanded one accommodate switch initially zero, changed one () response activated, back zero response ends. Responses currently end trigger effective R less 1.0. make_parameters() function split make_infect_parameters() make_country_parameters() clearer manageable. daedalus()-level override parameters originally implemented ... replaced three separate overrides: country_params_manual, infect_params_manual, initial_state_manual, users pass custom values. prepare_output() made internal; omits data non-working age groups economic sectors (always 0), pads sector numbers fit format sector_XX. Internal functions R effective calculations getting total hospitalisations, r_eff() get_hospitalisations() added. Closures implemented deSolve::events triggered rootfinding function, separate functions activation termination, implemented make_response_threshold_event() make_rt_end_event(). contacts_between_sectors now set 0.0, previously 1e-6. Added tests closure triggers expected effects; closure end points specifically tested.","code":""},{"path":"/news/index.html","id":"daedalus-003","dir":"Changelog","previous_headings":"","what":"daedalus 0.0.3","title":"daedalus 0.0.3","text":"patch version adds workplace infections epidemiological model, adds country demography data. Added worker--worker infections within sectors, consumer worker contacts (#9). Added package data: country_data (country demography data) economic_contacts (sector-wise contacts data). Note worker--worker contacts sectors currently takes dummy value expected used near future (#11). Modified daedalus::daedalus() take single required argument country name run model package data country contact matrices economic demographic data (#11). Users can still pass infection parameters via .... Made package function default_parameters() internal renamed make_parameters(); added internal helper function make_initial_state() quickly generate country-appropriate initial states. Added documentation tests modified function calls.","code":""},{"path":"/news/index.html","id":"daedalus-002","dir":"Changelog","previous_headings":"","what":"daedalus 0.0.2","title":"daedalus 0.0.2","text":"patch version adds basic epidemiological model (#7). Added model functions daedalus() (user-facing) .daedalus_ode() (internal) run simple age-stratified (4 age groups) SEIR-HD epidemiological model taken @robj411 https://github.com/robj411/p2_drivers, Added default model parameters default_parameters() correspond roughly pandemic influenza, Added prepare_output() prepare daedalus() output, Added tests functions, Updated package infrastructure: DESCRIPTION, NAMESPACE, WORDLIST, .Rbuildignore, _pkgdown.yml reference. Disabled undesirable_function_linter vignettes flags library() calls. Updated Readme added content ‘Get started’ vignette.","code":""},{"path":"/news/index.html","id":"daedalus-001","dir":"Changelog","previous_headings":"","what":"daedalus 0.0.1","title":"daedalus 0.0.1","text":"Initial package setup including GitHub Actions workflows code quality checks. Updated GH Actions workflows R CMD check (fails ‘NOTE’) code test coverage; Added linting, citation update, Readme rendering, license year update workflows; Added spellchecking known words list.","code":""}]
